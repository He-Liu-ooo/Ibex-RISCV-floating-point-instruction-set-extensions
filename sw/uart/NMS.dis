
NMS.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	2100006f          	j	28c <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	2100006f          	j	290 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	2080006f          	j	28c <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	2040006f          	j	28c <default_exc_handler>

Disassembly of section .text:

0000008c <_stext>:

.global main

main:                   

    li x9,0x10000000    # BOX_INFO_BASE_ADDR
  8c:	100004b7          	lui	s1,0x10000
    li x28,0x10000438   # MAX_BOX_BASE_ADDR
  90:	10000e37          	lui	t3,0x10000
  94:	438e0e13          	addi	t3,t3,1080 # 10000438 <_stack_start+0xfff0438>
    li x30,0x10000460   # RES_BASE_ADDR      # 栈指针用来存放基地址
  98:	10000f37          	lui	t5,0x10000
  9c:	460f0f13          	addi	t5,t5,1120 # 10000460 <_stack_start+0xfff0460>

    /* constants */
    li x5,0x11                  /* NUM_BOX=17*/
  a0:	01100293          	li	t0,17
    li x6,0x3                  /* NUM_CLASS=3*/
  a4:	00300313          	li	t1,3
    #li x5,0xe                  /* NUM_BOX=14*/
    #li x6,0x2                  /* NUM_CLASS=2*/
    li x27,0x2b67             /* 11111 */
  a8:	00003db7          	lui	s11,0x3
  ac:	b67d8d93          	addi	s11,s11,-1177 # 2b67 <_min_stack+0xb67>
    li x31,0x50               /* 80 */
  b0:	05000f93          	li	t6,80

000000b4 <BEGIN>:

    # find_max
BEGIN:
    add x25,x0,x0        # flag=0
  b4:	00000cb3          	add	s9,zero,zero
    add x7,x0,x0         # i=0    for(i=0;i<NUM_CLASS;i++)
  b8:	000003b3          	add	t2,zero,zero

000000bc <BACK2>:

BACK2:     
    addrtwo x18,x28,x7   # max_box[i]的绝对地址
  bc:	007e190b          	addrtwo	s2,t3,t2
    sw x27,0x0(x18)      # max_box[i]=-1
  c0:	01b92023          	sw	s11,0(s2)
    # addi x7,x7,1         # i++
    # blt x7,x6,BACK2      # if i < NUM_CLASS, for loop continues
    plusonelt x7,x6,BACK2
  c4:	fe63ac8b          	plusonelt	t2,t1,bc <BACK2>
# ====================================================================== #

# 否则一个 loop 循环结束，进行下一个 loop 循环
    add x7,x0,x0         # i=0    for(i=0;i<NUM_BOX;i++)
  c8:	000003b3          	add	t2,zero,zero

000000cc <BACK3>:
BACK3:  
    addrfive x18,x9,x7
  cc:	0274990b          	addrfive	s2,s1,t2
    lw x20,0x1c(x18)     # 偏移量为28(dec)   x20 存 box_info[i].valid_bit
  d0:	01c92a03          	lw	s4,28(s2)
    lw x22,0x0(x18)      # x22 有box_info[i].id
  d4:	00092b03          	lw	s6,0(s2)
    flw f18,0x04(x18)    # f18=box_info[i].score
  d8:	00492907          	flw	fs2,4(s2)
    beq x20,x0,MARK3     # 若 box_info[i].valid_bit 为0，则跳转到 loop 最尾部
  dc:	020a0663          	beqz	s4,108 <MARK3>
    addi x25,x0,1        # flag=1
  e0:	00100c93          	li	s9,1
    lw x21,0x18(x18)     # 偏移量为24(dec)   x21 存 box_info[i].class_
  e4:	01892a83          	lw	s5,24(s2)
    addrtwo x18,x28,x21  # x18存的是 max_box[box_info[i].class_] 的绝对地址
  e8:	015e190b          	addrtwo	s2,t3,s5
    lw x23,0x0(x18)      # 最大box id
  ec:	00092b83          	lw	s7,0(s2)
    beq x23,x27,MARK51   # if max_box[box_info[i].class_]==-1
  f0:	13bb8e63          	beq	s7,s11,22c <MARK51>
    nop     
  f4:	00000013          	nop
    addrfive x18,x9,x23  # box_info[max_box[box_info[i].class_]] 绝对地址
  f8:	0374990b          	addrfive	s2,s1,s7
    flw f19,0x04(x18)    # f19=box_info[max_box[box_info[i].class_]].score
  fc:	00492987          	flw	fs3,4(s2)
    flt.s x24,f19,f18    # if box_info[max_box[box_info[i].class_]].score<box_info[i].score,x24=1
 100:	a1299c53          	flt.s	s8,fs3,fs2
    bne x24,x0,MARK52    # if x24=1,jump
 104:	120c1863          	bnez	s8,234 <MARK52>

00000108 <MARK3>:
MARK3:
    # addi x7,x7,1         # i++
    # blt x7,x5,BACK3      # if i < NUM_BOX, for loop continues
    plusonelt x7,x5,BACK3
 108:	fc53a28b          	plusonelt	t2,t0,cc <BACK3>
# ======================================================================= #

    beq x25,x0,MARK61    # if flag=0, jump  
 10c:	120c8a63          	beqz	s9,240 <MARK61>
# 第一次結束是16000

    add x7,x0,x0         # i=0    for(i=0;i<NUM_CLASS;i++)
 110:	000003b3          	add	t2,zero,zero

00000114 <BACK4>:
BACK4:
    addrtwo x18,x28,x7   # max_box[i]的绝对地址
 114:	007e190b          	addrtwo	s2,t3,t2
    lw x23,0x0(x18)      # max_box[i]的值
 118:	00092b83          	lw	s7,0(s2)
    beq x23,x27,FORWORD1 # if max_box[i]==-1,jump
 11c:	01bb8a63          	beq	s7,s11,130 <FORWORD1>

    addrfive x18,x9,x23  # x18 里装的是 box_info[i].id 的绝对地址
 120:	0374990b          	addrfive	s2,s1,s7
    sw x0,0x1c(x18)      # box_info[max_box[i]].valid_bit=false
 124:	00092e23          	sw	zero,28(s2)
    sw x23,0x0(x30)       # 存到输出区
 128:	017f2023          	sw	s7,0(t5)
# ERROR!
    addi x30,x30,4         # 栈指针向后移一位
 12c:	004f0f13          	addi	t5,t5,4

00000130 <FORWORD1>:

FORWORD1:
    # addi x7,x7,1         # i++
    # blt x7,x6,BACK4      # if i < NUM_CLASS, for loop continues
    plusonelt x7,x6,BACK4
 130:	fe63a28b          	plusonelt	t2,t1,114 <BACK4>

    addi x29,x0,1        # find_max() return 1
 134:	00100e93          	li	t4,1

00000138 <BACK61>:
BACK61:
    beq x29,x0,OVER          # if find_max() return 0
 138:	100e8863          	beqz	t4,248 <OVER>
# ======================================================================= #


# delete_overlap
    fadd.s f1,f0,f0        # son=0.0
 13c:	000070d3          	fadd.s	ft1,ft0,ft0
    fadd.s f2,f0,f0        # mother=0.0
 140:	00007153          	fadd.s	ft2,ft0,ft0
    fadd.s f3,f0,f0        # IoU=0.0
 144:	000071d3          	fadd.s	ft3,ft0,ft0
    addi x7,x0,0         # in while loop,  init i=0
 148:	00000393          	li	t2,0

0000014c <BACK1>:
# 第一次開始是17300
BACK1:               # for(i=0;i<NUM_BOX;i++)
    addrfive x18,x9,x7   # x18 里装的是 box_info[i].id 的绝对地址
 14c:	0274990b          	addrfive	s2,s1,t2
    lw x20,0x1c(x18)     # 偏移量为28(dec)   x20 存 box_info[i].valid_bit
 150:	01c92a03          	lw	s4,28(s2)
    beq x20,x0,MARK2     # 若 box_info[i].valid_bit 为0，则跳转到 loop 最尾部
 154:	0a0a0e63          	beqz	s4,210 <MARK2>
 
    flw f18,0x08(x18)    # x1=box_info[i].x1
 158:	00892907          	flw	fs2,8(s2)
    flw f19,0x0c(x18)    # y1=box_info[i].y1
 15c:	00c92987          	flw	fs3,12(s2)
    flw f20,0x10(x18)    # x2=box_info[i].x2
 160:	01092a07          	flw	fs4,16(s2)
    flw f21,0x14(x18)    # y2=box_info[i].y2
 164:	01492a87          	flw	fs5,20(s2)

    lw x21,0x18(x18)     # box_info[i].class_
 168:	01892a83          	lw	s5,24(s2)
    addrtwo x18,x28,x21  # x18 里装的是 max_box 的绝对地址
 16c:	015e190b          	addrtwo	s2,t3,s5
    lw x23,0x0(x18)      # max_box[box_info[i].class_] 内容
 170:	00092b83          	lw	s7,0(s2)

    addrfive x18,x9,x23  # x18 里装的是最大 box 的绝对地址
 174:	0374990b          	addrfive	s2,s1,s7

    flw f22,0x08(x18)    # a1=box_info[max_box[box_info[i].class_]].x1
 178:	00892b07          	flw	fs6,8(s2)
    flw f23,0x0c(x18)    # b1=box_info[max_box[box_info[i].class_]].y1
 17c:	00c92b87          	flw	fs7,12(s2)
    flw f24,0x10(x18)    # a2=box_info[max_box[box_info[i].class_]].x2
 180:	01092c07          	flw	fs8,16(s2)
    flw f25,0x14(x18)    # b2=box_info[max_box[box_info[i].class_]].y2
 184:	01492c87          	flw	fs9,20(s2)

    fmax.s f28,f18,f22   # xx1
 188:	29691e53          	fmax.s	ft8,fs2,fs6
    fmin.s f29,f20,f24   # xx2
 18c:	298a0ed3          	fmin.s	ft9,fs4,fs8
    fmax.s f30,f19,f23   # yy1
 190:	29799f53          	fmax.s	ft10,fs3,fs7
    fmin.s f31,f21,f25   # yy2
 194:	299a8fd3          	fmin.s	ft11,fs5,fs9

# 计算 mother
    
    fsubabs.s f4,f18,f20  # delta_x1=|x1-x2|
 198:	05497253          	fsubabs.s	ft4,fs2,fs4
    fsubabs.s f5,f19,f21  # delta_y1=|y1-y2|
 19c:	0559f2d3          	fsubabs.s	ft5,fs3,fs5
    fsubabs.s f6,f22,f24  # delta_x2=|a1-a2|
 1a0:	058b7353          	fsubabs.s	ft6,fs6,fs8
    fsubabs.s f7,f23,f25  # delta_y2=|b1-b2|
 1a4:	059bf3d3          	fsubabs.s	ft7,fs7,fs9

    fmul.s f2,f4,f5         # mother=delta_x1*delta_y1
 1a8:	10527153          	fmul.s	ft2,ft4,ft5
    fmadd.s f2,f6,f7,f2     # mother=delta_x1*delta_y1+delta_x2*delta_y2 
 1ac:	10737143          	fmadd.s	ft2,ft6,ft7,ft2

# 计算 son
    fadd.s f4,f18,f20      # xmid1=x1+x2
 1b0:	01497253          	fadd.s	ft4,fs2,fs4
    fadd.s f5,f22,f24      # xmid2=a1+a2
 1b4:	018b72d3          	fadd.s	ft5,fs6,fs8
    fadd.s f6,f19,f21      # ymid1=y1+y2
 1b8:	0159f353          	fadd.s	ft6,fs3,fs5
    fadd.s f7,f23,f25      # ymid2=b1+b2
 1bc:	019bf3d3          	fadd.s	ft7,fs7,fs9

    fsubabs.s f22,f4,f5       # |xmid1-xmid2|
 1c0:	04527b53          	fsubabs.s	fs6,ft4,ft5
    fsubabs.s f23,f6,f7       # |ymid2-ymid1|
 1c4:	04737bd3          	fsubabs.s	fs7,ft6,ft7

    fsub.s f4,f20,f18         # x2-x1
 1c8:	092a7253          	fsub.s	ft4,fs4,fs2
    fsub.s f5,f24,f22         # a2-a1
 1cc:	096c72d3          	fsub.s	ft5,fs8,fs6
    fadd.s f26,f4,f5          # x_delta=(x2-x1+a2-a1)
 1d0:	00527d53          	fadd.s	fs10,ft4,ft5

    fsub.s f6,f21,f19         # y2-y1
 1d4:	093af353          	fsub.s	ft6,fs5,fs3
    fsub.s f7,f25,f23         # b2-b1
 1d8:	097cf3d3          	fsub.s	ft7,fs9,fs7
    fadd.s f27,f6,f7          # y_delta=(y2-y1+b2-b1)
 1dc:	00737dd3          	fadd.s	fs11,ft6,ft7

# 四个条件一个满足x24就为1
    add x24,x0,x0        # 初始化x24为0
 1e0:	00000c33          	add	s8,zero,zero
    flt.s x24,f26,f22      # |xmid1-xmid2|>x_delta则x24=1
 1e4:	a16d1c53          	flt.s	s8,fs10,fs6
    bne x24,x0,MARK31    # 若x24是1，则跳转MARK31
 1e8:	020c1863          	bnez	s8,218 <MARK31>
    flt.s x24,f27,f23      # |ymid2-ymid1|>y_delta则x24=1
 1ec:	a17d9c53          	flt.s	s8,fs11,fs7
    bne x24,x0,MARK31    # 若x24是1，则跳转MARK31
 1f0:	020c1463          	bnez	s8,218 <MARK31>
   
# 否则计算son
    fsubabs.s f26,f28,f29  # w=|xx1-xx2|
 1f4:	05de7d53          	fsubabs.s	fs10,ft8,ft9
    fsubabs.s f27,f30,f31  # h=|yy1-yy2|
 1f8:	05ff7dd3          	fsubabs.s	fs11,ft10,ft11
    fmul.s f1,f26,f27      # son=h*w
 1fc:	11bd70d3          	fmul.s	ft1,fs10,fs11

    fsub.s f2,f2,f1        # mother=mother-son
 200:	08117153          	fsub.s	ft2,ft2,ft1

00000204 <BACK31>:

# 计算 IoU 
BACK31:
    fdiv.s f3,f1,f2        # IoU=son/mother
 204:	1820f1d3          	fdiv.s	ft3,ft1,ft2
    flt.s x24,f9,f3        # if IoU>THRESHOLD, x24=1
 208:	a0349c53          	flt.s	s8,fs1,ft3
    bne x24,x0,MARK41    # if x24=1,jump
 20c:	000c1a63          	bnez	s8,220 <MARK41>

00000210 <MARK2>:

MARK2:                                      
    # addi x7,x7,1         # i++
    # blt x7,x5,BACK1      # if i < NUM_BOX, for loop continues
    plusonelt x7,x5,BACK1
 210:	f253ae8b          	plusonelt	t2,t0,14c <BACK1>
    j BEGIN            # loop 结束后，无条件跳转到 while 开始，check find_max 函数
 214:	ea1ff06f          	j	b4 <BEGIN>

00000218 <MARK31>:

#######################################################  
MARK31:
    fadd.s f1,f0,f0       # son=0
 218:	000070d3          	fadd.s	ft1,ft0,ft0
    j BACK31
 21c:	fe9ff06f          	j	204 <BACK31>

00000220 <MARK41>:

MARK41:    
    addrfive x18,x9,x7   # box_info[i] 绝对地址
 220:	0274990b          	addrfive	s2,s1,t2
    sw x0,0x1c(x18)      # box_info[i].valid_bit=false
 224:	00092e23          	sw	zero,28(s2)
    j MARK2
 228:	fe9ff06f          	j	210 <MARK2>

0000022c <MARK51>:

    
MARK51:
    sw x22,0x0(x18)      # box_info[i].id 存到 max_box[box_info[i].class_]里去
 22c:	01692023          	sw	s6,0(s2)
    j MARK3
 230:	ed9ff06f          	j	108 <MARK3>

00000234 <MARK52>:
    
MARK52:
    addrtwo x18,x28,x21
 234:	015e190b          	addrtwo	s2,t3,s5
    # mul x18,x21,x26      # box_info[i]*4
    # add x18,x28,x18      # +max_box_base_addr  x18存的是 max_box[box_info[i].class_] 的绝对地址
    sw x22,0x0(x18)      # max_box[box_info[i].class_]=box_info[i].id
 238:	01692023          	sw	s6,0(s2)
    j MARK3
 23c:	ecdff06f          	j	108 <MARK3>

00000240 <MARK61>:

    
MARK61:
    add x29,x0,x0        # find_max() 返回 0
 240:	00000eb3          	add	t4,zero,zero
    j BACK61
 244:	ef5ff06f          	j	138 <BACK61>

00000248 <OVER>:

    
OVER:
    li x30,0x10000460    # RES_BASE_ADDR      # 栈指针用来存放基地址
 248:	10000f37          	lui	t5,0x10000
 24c:	460f0f13          	addi	t5,t5,1120 # 10000460 <_stack_start+0xfff0460>
    flw f4,0x0(x30)
 250:	000f2207          	flw	ft4,0(t5)
    flw f5,0x4(x30)
 254:	004f2287          	flw	ft5,4(t5)
    flw f6,0x8(x30)
 258:	008f2307          	flw	ft6,8(t5)
    flw f7,0xc(x30)
 25c:	00cf2387          	flw	ft7,12(t5)
    flw f18,0x10(x30)
 260:	010f2907          	flw	fs2,16(t5)
    flw f19,0x14(x30)
 264:	014f2987          	flw	fs3,20(t5)
    flw f20,0x18(x30)
 268:	018f2a07          	flw	fs4,24(t5)
    
    li x19,0x40013000   # GPIO_BASE_ADDR
 26c:	400139b7          	lui	s3,0x40013
    fsw f4,0x0(x19)
 270:	0049a027          	fsw	ft4,0(s3) # 40013000 <_stack_start+0x40003000>
    fsw f5,0x4(x19)
 274:	0059a227          	fsw	ft5,4(s3)
    fsw f6,0x8(x19)
 278:	0069a427          	fsw	ft6,8(s3)
    fsw f7,0xc(x19)
 27c:	0079a627          	fsw	ft7,12(s3)
    fsw f18,0x10(x19)
 280:	0129a827          	fsw	fs2,16(s3)
    fsw f19,0x14(x19)
 284:	0139aa27          	fsw	fs3,20(s3)
    fsw f20,0x18(x19)
 288:	0149ac27          	fsw	fs4,24(s3)

0000028c <default_exc_handler>:
  jal x0, default_exc_handler
 28c:	0000006f          	j	28c <default_exc_handler>

00000290 <reset_handler>:
  mv  x1, x0
 290:	00000093          	li	ra,0
  mv  x2, x1
 294:	00008113          	mv	sp,ra
  mv  x3, x1
 298:	00008193          	mv	gp,ra
  mv  x4, x1
 29c:	00008213          	mv	tp,ra
  mv  x5, x1
 2a0:	00008293          	mv	t0,ra
  mv  x6, x1
 2a4:	00008313          	mv	t1,ra
  mv  x7, x1
 2a8:	00008393          	mv	t2,ra
  mv  x8, x1
 2ac:	00008413          	mv	s0,ra
  mv  x9, x1
 2b0:	00008493          	mv	s1,ra
  mv x10, x1
 2b4:	00008513          	mv	a0,ra
  mv x11, x1
 2b8:	00008593          	mv	a1,ra
  mv x12, x1
 2bc:	00008613          	mv	a2,ra
  mv x13, x1
 2c0:	00008693          	mv	a3,ra
  mv x14, x1
 2c4:	00008713          	mv	a4,ra
  mv x15, x1
 2c8:	00008793          	mv	a5,ra
  mv x16, x1
 2cc:	00008813          	mv	a6,ra
  mv x17, x1
 2d0:	00008893          	mv	a7,ra
  mv x18, x1
 2d4:	00008913          	mv	s2,ra
  mv x19, x1
 2d8:	00008993          	mv	s3,ra
  mv x20, x1
 2dc:	00008a13          	mv	s4,ra
  mv x21, x1
 2e0:	00008a93          	mv	s5,ra
  mv x22, x1
 2e4:	00008b13          	mv	s6,ra
  mv x23, x1
 2e8:	00008b93          	mv	s7,ra
  mv x24, x1
 2ec:	00008c13          	mv	s8,ra
  mv x25, x1
 2f0:	00008c93          	mv	s9,ra
  mv x26, x1
 2f4:	00008d13          	mv	s10,ra
  mv x27, x1
 2f8:	00008d93          	mv	s11,ra
  mv x28, x1
 2fc:	00008e13          	mv	t3,ra
  mv x29, x1
 300:	00008e93          	mv	t4,ra
  mv x30, x1
 304:	00008f13          	mv	t5,ra
  mv x31, x1
 308:	00008f93          	mv	t6,ra
  la   x2, _stack_start
 30c:	00010117          	auipc	sp,0x10
 310:	cf410113          	addi	sp,sp,-780 # 10000 <_stack_start>

00000314 <_start>:
  la x26, _bss_start
 314:	34800d13          	li	s10,840
  la x27, _bss_end
 318:	34800d93          	li	s11,840
  bge x26, x27, zero_loop_end
 31c:	01bd5863          	bge	s10,s11,32c <main_entry>

00000320 <zero_loop>:
  sw x0, 0(x26)
 320:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 324:	004d0d13          	addi	s10,s10,4
  ble x26, x27, zero_loop
 328:	ffaddce3          	bge	s11,s10,320 <zero_loop>

0000032c <main_entry>:
  addi x10, x0, 0
 32c:	00000513          	li	a0,0
  addi x11, x0, 0
 330:	00000593          	li	a1,0
  jal x1, main
 334:	d59ff0ef          	jal	ra,8c <_stext>

00000338 <__CTOR_LIST__>:
	...

00000340 <__CTOR_END__>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
  .endr
   0:	2841                	jal	90 <_stext+0x4>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	001e                	c.slli	zero,0x7
   e:	0000                	unimp
  10:	7205                	lui	tp,0xfffe1
  12:	3376                	fld	ft6,376(sp)
  14:	6932                	flw	fs2,12(sp)
  16:	7032                	flw	ft0,44(sp)
  18:	5f30                	lw	a2,120(a4)
  1a:	326d                	jal	fffff9c4 <_stack_start+0xfffef9c4>
  1c:	3070                	fld	fa2,224(s0)
  1e:	615f 7032 5f30      	0x5f307032615f
  24:	3266                	fld	ft4,120(sp)
  26:	3070                	fld	fa2,224(s0)
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0312                	slli	t1,t1,0x4
   2:	0000                	unimp
   4:	001c0003          	lb	zero,1(s8)
   8:	0000                	unimp
   a:	0101                	addi	sp,sp,0
   c:	000d0efb          	0xd0efb
  10:	0101                	addi	sp,sp,0
  12:	0101                	addi	sp,sp,0
  14:	0000                	unimp
  16:	0100                	addi	s0,sp,128
  18:	0000                	unimp
  1a:	0001                	nop
  1c:	4d4e                	lw	s10,208(sp)
  1e:	00732e53          	fadd.s	ft8,ft6,ft7,rdn
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0500                	addi	s0,sp,640
  28:	8c02                	jr	s8
  2a:	0000                	unimp
  2c:	1a00                	addi	s0,sp,304
  2e:	04090103          	lb	sp,64(s2)
  32:	0100                	addi	s0,sp,128
  34:	08090103          	lb	sp,128(s2)
  38:	0100                	addi	s0,sp,128
  3a:	08090303          	lb	t1,128(s2)
  3e:	0100                	addi	s0,sp,128
  40:	04090103          	lb	sp,64(s2)
  44:	0100                	addi	s0,sp,128
  46:	04090303          	lb	t1,64(s2)
  4a:	0100                	addi	s0,sp,128
  4c:	08090103          	lb	sp,128(s2)
  50:	0100                	addi	s0,sp,128
  52:	04090403          	lb	s0,64(s2)
  56:	0100                	addi	s0,sp,128
  58:	04090103          	lb	sp,64(s2)
  5c:	0100                	addi	s0,sp,128
  5e:	04090303          	lb	t1,64(s2)
  62:	0100                	addi	s0,sp,128
  64:	04090103          	lb	sp,64(s2)
  68:	0100                	addi	s0,sp,128
  6a:	04090303          	lb	t1,64(s2)
  6e:	0100                	addi	s0,sp,128
  70:	04090403          	lb	s0,64(s2)
  74:	0100                	addi	s0,sp,128
  76:	04090203          	lb	tp,64(s2)
  7a:	0100                	addi	s0,sp,128
  jal x0, default_exc_handler
  7c:	04090103          	lb	sp,64(s2)
  jal x0, reset_handler
  80:	0100                	addi	s0,sp,128
  82:	04090103          	lb	sp,64(s2)
  jal x0, default_exc_handler
  86:	0100                	addi	s0,sp,128
  jal x0, default_exc_handler
  88:	04090103          	lb	sp,64(s2)
    li x9,0x10000000    # BOX_INFO_BASE_ADDR
  8c:	0100                	addi	s0,sp,128
  8e:	04090103          	lb	sp,64(s2)
    li x28,0x10000438   # MAX_BOX_BASE_ADDR
  92:	0100                	addi	s0,sp,128
  94:	04090103          	lb	sp,64(s2)
    li x30,0x10000460   # RES_BASE_ADDR      # 栈指针用来存放基地址
  98:	0100                	addi	s0,sp,128
  9a:	04090103          	lb	sp,64(s2)
  9e:	0100                	addi	s0,sp,128
    li x5,0x11                  /* NUM_BOX=17*/
  a0:	04090103          	lb	sp,64(s2)
    li x6,0x3                  /* NUM_CLASS=3*/
  a4:	0100                	addi	s0,sp,128
  a6:	04090103          	lb	sp,64(s2)
    li x27,0x2b67             /* 11111 */
  aa:	0100                	addi	s0,sp,128
  ac:	04090103          	lb	sp,64(s2)
    li x31,0x50               /* 80 */
  b0:	0100                	addi	s0,sp,128
  b2:	04090103          	lb	sp,64(s2)
    add x25,x0,x0        # flag=0
  b6:	0100                	addi	s0,sp,128
    add x7,x0,x0         # i=0    for(i=0;i<NUM_CLASS;i++)
  b8:	04090103          	lb	sp,64(s2)
    addrtwo x18,x28,x7   # max_box[i]的绝对地址
  bc:	0100                	addi	s0,sp,128
  be:	04090103          	lb	sp,64(s2)
    sw x27,0x0(x18)      # max_box[i]=-1
  c2:	0100                	addi	s0,sp,128
    plusonelt x7,x6,BACK2
  c4:	04090103          	lb	sp,64(s2)
    add x7,x0,x0         # i=0    for(i=0;i<NUM_BOX;i++)
  c8:	0100                	addi	s0,sp,128
  ca:	04090103          	lb	sp,64(s2)
    addrfive x18,x9,x7
  ce:	0100                	addi	s0,sp,128
    lw x20,0x1c(x18)     # 偏移量为28(dec)   x20 存 box_info[i].valid_bit
  d0:	04090403          	lb	s0,64(s2)
    lw x22,0x0(x18)      # x22 有box_info[i].id
  d4:	0100                	addi	s0,sp,128
  d6:	04090303          	lb	t1,64(s2)
    flw f18,0x04(x18)    # f18=box_info[i].score
  da:	0100                	addi	s0,sp,128
    beq x20,x0,MARK3     # 若 box_info[i].valid_bit 为0，则跳转到 loop 最尾部
  dc:	04090303          	lb	t1,64(s2)
    addi x25,x0,1        # flag=1
  e0:	0100                	addi	s0,sp,128
  e2:	04090203          	lb	tp,64(s2)
    lw x21,0x18(x18)     # 偏移量为24(dec)   x21 存 box_info[i].class_
  e6:	0100                	addi	s0,sp,128
    addrtwo x18,x28,x21  # x18存的是 max_box[box_info[i].class_] 的绝对地址
  e8:	04090103          	lb	sp,64(s2)
    lw x23,0x0(x18)      # 最大box id
  ec:	0100                	addi	s0,sp,128
  ee:	04090103          	lb	sp,64(s2)
    beq x23,x27,MARK51   # if max_box[box_info[i].class_]==-1
  f2:	0100                	addi	s0,sp,128
    nop     
  f4:	04090203          	lb	tp,64(s2)
    addrfive x18,x9,x23  # box_info[max_box[box_info[i].class_]] 绝对地址
  f8:	0100                	addi	s0,sp,128
  fa:	04090103          	lb	sp,64(s2)
    flw f19,0x04(x18)    # f19=box_info[max_box[box_info[i].class_]].score
  fe:	0100                	addi	s0,sp,128
    flt.s x24,f19,f18    # if box_info[max_box[box_info[i].class_]].score<box_info[i].score,x24=1
 100:	04090103          	lb	sp,64(s2)
    bne x24,x0,MARK52    # if x24=1,jump
 104:	0100                	addi	s0,sp,128
 106:	04090203          	lb	tp,64(s2)
    plusonelt x7,x5,BACK3
 10a:	0100                	addi	s0,sp,128
    beq x25,x0,MARK61    # if flag=0, jump  
 10c:	04090503          	lb	a0,64(s2)
    add x7,x0,x0         # i=0    for(i=0;i<NUM_CLASS;i++)
 110:	0100                	addi	s0,sp,128
 112:	04090203          	lb	tp,64(s2)
    addrtwo x18,x28,x7   # max_box[i]的绝对地址
 116:	0100                	addi	s0,sp,128
    lw x23,0x0(x18)      # max_box[i]的值
 118:	04090203          	lb	tp,64(s2)
    beq x23,x27,FORWORD1 # if max_box[i]==-1,jump
 11c:	0100                	addi	s0,sp,128
 11e:	04090503          	lb	a0,64(s2)
    addrfive x18,x9,x23  # x18 里装的是 box_info[i].id 的绝对地址
 122:	0100                	addi	s0,sp,128
    sw x0,0x1c(x18)      # box_info[max_box[i]].valid_bit=false
 124:	04090103          	lb	sp,64(s2)
    sw x23,0x0(x30)       # 存到输出区
 128:	0100                	addi	s0,sp,128
 12a:	04090103          	lb	sp,64(s2)
    addi x30,x30,4         # 栈指针向后移一位
 12e:	0100                	addi	s0,sp,128
    plusonelt x7,x6,BACK4
 130:	04090103          	lb	sp,64(s2)
    addi x29,x0,1        # find_max() return 1
 134:	0100                	addi	s0,sp,128
 136:	04090303          	lb	t1,64(s2)
    beq x29,x0,OVER          # if find_max() return 0
 13a:	0100                	addi	s0,sp,128
    fadd.s f1,f0,f0        # son=0.0
 13c:	04090103          	lb	sp,64(s2)
    fadd.s f2,f0,f0        # mother=0.0
 140:	0100                	addi	s0,sp,128
 142:	04090103          	lb	sp,64(s2)
    fadd.s f3,f0,f0        # IoU=0.0
 146:	0100                	addi	s0,sp,128
    addi x7,x0,0         # in while loop,  init i=0
 148:	04090203          	lb	tp,64(s2)
    addrfive x18,x9,x7   # x18 里装的是 box_info[i].id 的绝对地址
 14c:	0100                	addi	s0,sp,128
 14e:	04090103          	lb	sp,64(s2)
    lw x20,0x1c(x18)     # 偏移量为28(dec)   x20 存 box_info[i].valid_bit
 152:	0100                	addi	s0,sp,128
    beq x20,x0,MARK2     # 若 box_info[i].valid_bit 为0，则跳转到 loop 最尾部
 154:	04090103          	lb	sp,64(s2)
    flw f18,0x08(x18)    # x1=box_info[i].x1
 158:	0100                	addi	s0,sp,128
 15a:	04090103          	lb	sp,64(s2)
    flw f19,0x0c(x18)    # y1=box_info[i].y1
 15e:	0100                	addi	s0,sp,128
    flw f20,0x10(x18)    # x2=box_info[i].x2
 160:	04090203          	lb	tp,64(s2)
    flw f21,0x14(x18)    # y2=box_info[i].y2
 164:	0100                	addi	s0,sp,128
 166:	04090103          	lb	sp,64(s2)
    lw x21,0x18(x18)     # box_info[i].class_
 16a:	0100                	addi	s0,sp,128
    addrtwo x18,x28,x21  # x18 里装的是 max_box 的绝对地址
 16c:	04090103          	lb	sp,64(s2)
    lw x23,0x0(x18)      # max_box[box_info[i].class_] 内容
 170:	0100                	addi	s0,sp,128
 172:	04090203          	lb	tp,64(s2)
    addrfive x18,x9,x23  # x18 里装的是最大 box 的绝对地址
 176:	0100                	addi	s0,sp,128
    flw f22,0x08(x18)    # a1=box_info[max_box[box_info[i].class_]].x1
 178:	04090203          	lb	tp,64(s2)
    flw f23,0x0c(x18)    # b1=box_info[max_box[box_info[i].class_]].y1
 17c:	0100                	addi	s0,sp,128
 17e:	04090103          	lb	sp,64(s2)
    flw f24,0x10(x18)    # a2=box_info[max_box[box_info[i].class_]].x2
 182:	0100                	addi	s0,sp,128
    flw f25,0x14(x18)    # b2=box_info[max_box[box_info[i].class_]].y2
 184:	04090103          	lb	sp,64(s2)
    fmax.s f28,f18,f22   # xx1
 188:	0100                	addi	s0,sp,128
 18a:	04090103          	lb	sp,64(s2)
    fmin.s f29,f20,f24   # xx2
 18e:	0100                	addi	s0,sp,128
    fmax.s f30,f19,f23   # yy1
 190:	04090203          	lb	tp,64(s2)
    fmin.s f31,f21,f25   # yy2
 194:	0100                	addi	s0,sp,128
 196:	04090103          	lb	sp,64(s2)
    fsubabs.s f4,f18,f20  # delta_x1=|x1-x2|
 19a:	0100                	addi	s0,sp,128
    fsubabs.s f5,f19,f21  # delta_y1=|y1-y2|
 19c:	04090103          	lb	sp,64(s2)
    fsubabs.s f6,f22,f24  # delta_x2=|a1-a2|
 1a0:	0100                	addi	s0,sp,128
 1a2:	04090103          	lb	sp,64(s2)
    fsubabs.s f7,f23,f25  # delta_y2=|b1-b2|
 1a6:	0100                	addi	s0,sp,128
    fmul.s f2,f4,f5         # mother=delta_x1*delta_y1
 1a8:	04090403          	lb	s0,64(s2)
    fmadd.s f2,f6,f7,f2     # mother=delta_x1*delta_y1+delta_x2*delta_y2 
 1ac:	0100                	addi	s0,sp,128
 1ae:	04090103          	lb	sp,64(s2)
    fadd.s f4,f18,f20      # xmid1=x1+x2
 1b2:	0100                	addi	s0,sp,128
    fadd.s f5,f22,f24      # xmid2=a1+a2
 1b4:	04090103          	lb	sp,64(s2)
    fadd.s f6,f19,f21      # ymid1=y1+y2
 1b8:	0100                	addi	s0,sp,128
 1ba:	04090103          	lb	sp,64(s2)
    fadd.s f7,f23,f25      # ymid2=b1+b2
 1be:	0100                	addi	s0,sp,128
    fsubabs.s f22,f4,f5       # |xmid1-xmid2|
 1c0:	04090203          	lb	tp,64(s2)
    fsubabs.s f23,f6,f7       # |ymid2-ymid1|
 1c4:	0100                	addi	s0,sp,128
 1c6:	04090103          	lb	sp,64(s2)
    fsub.s f4,f20,f18         # x2-x1
 1ca:	0100                	addi	s0,sp,128
    fsub.s f5,f24,f22         # a2-a1
 1cc:	04090303          	lb	t1,64(s2)
    fadd.s f26,f4,f5          # x_delta=(x2-x1+a2-a1)
 1d0:	0100                	addi	s0,sp,128
 1d2:	04090103          	lb	sp,64(s2)
    fsub.s f6,f21,f19         # y2-y1
 1d6:	0100                	addi	s0,sp,128
    fsub.s f7,f25,f23         # b2-b1
 1d8:	04090103          	lb	sp,64(s2)
    fadd.s f27,f6,f7          # y_delta=(y2-y1+b2-b1)
 1dc:	0100                	addi	s0,sp,128
 1de:	04090103          	lb	sp,64(s2)
    add x24,x0,x0        # 初始化x24为0
 1e2:	0100                	addi	s0,sp,128
    flt.s x24,f26,f22      # |xmid1-xmid2|>x_delta则x24=1
 1e4:	04090203          	lb	tp,64(s2)
    bne x24,x0,MARK31    # 若x24是1，则跳转MARK31
 1e8:	0100                	addi	s0,sp,128
 1ea:	04090103          	lb	sp,64(s2)
    flt.s x24,f27,f23      # |ymid2-ymid1|>y_delta则x24=1
 1ee:	0100                	addi	s0,sp,128
    bne x24,x0,MARK31    # 若x24是1，则跳转MARK31
 1f0:	04090203          	lb	tp,64(s2)
    fsubabs.s f26,f28,f29  # w=|xx1-xx2|
 1f4:	0100                	addi	s0,sp,128
 1f6:	04090103          	lb	sp,64(s2)
    fsubabs.s f27,f30,f31  # h=|yy1-yy2|
 1fa:	0100                	addi	s0,sp,128
    fmul.s f1,f26,f27      # son=h*w
 1fc:	04090103          	lb	sp,64(s2)
    fsub.s f2,f2,f1        # mother=mother-son
 200:	0100                	addi	s0,sp,128
 202:	04090203          	lb	tp,64(s2)
    fdiv.s f3,f1,f2        # IoU=son/mother
 206:	0100                	addi	s0,sp,128
    flt.s x24,f9,f3        # if IoU>THRESHOLD, x24=1
 208:	04090103          	lb	sp,64(s2)
    bne x24,x0,MARK41    # if x24=1,jump
 20c:	0100                	addi	s0,sp,128
 20e:	04090103          	lb	sp,64(s2)
    plusonelt x7,x5,BACK1
 212:	0100                	addi	s0,sp,128
    j BEGIN            # loop 结束后，无条件跳转到 while 开始，check find_max 函数
 214:	04090303          	lb	t1,64(s2)
    fadd.s f1,f0,f0       # son=0
 218:	0100                	addi	s0,sp,128
 21a:	04090103          	lb	sp,64(s2)
    j BACK31
 21e:	0100                	addi	s0,sp,128
    addrfive x18,x9,x7   # box_info[i] 绝对地址
 220:	04090103          	lb	sp,64(s2)
    sw x0,0x1c(x18)      # box_info[i].valid_bit=false
 224:	0100                	addi	s0,sp,128
 226:	04090103          	lb	sp,64(s2)
    j MARK2
 22a:	0100                	addi	s0,sp,128
    sw x22,0x0(x18)      # box_info[i].id 存到 max_box[box_info[i].class_]里去
 22c:	04090103          	lb	sp,64(s2)
    j MARK3
 230:	0100                	addi	s0,sp,128
 232:	04090303          	lb	t1,64(s2)
    addrtwo x18,x28,x21
 236:	0100                	addi	s0,sp,128
    sw x22,0x0(x18)      # max_box[box_info[i].class_]=box_info[i].id
 238:	04090103          	lb	sp,64(s2)
    j MARK3
 23c:	0100                	addi	s0,sp,128
 23e:	04090103          	lb	sp,64(s2)
    add x29,x0,x0        # find_max() 返回 0
 242:	0100                	addi	s0,sp,128
    j BACK61
 244:	04090203          	lb	tp,64(s2)
    li x30,0x10000460    # RES_BASE_ADDR      # 栈指针用来存放基地址
 248:	0100                	addi	s0,sp,128
 24a:	04090403          	lb	s0,64(s2)
 24e:	0100                	addi	s0,sp,128
    flw f4,0x0(x30)
 250:	04090103          	lb	sp,64(s2)
    flw f5,0x4(x30)
 254:	0100                	addi	s0,sp,128
 256:	04090103          	lb	sp,64(s2)
    flw f6,0x8(x30)
 25a:	0100                	addi	s0,sp,128
    flw f7,0xc(x30)
 25c:	04090503          	lb	a0,64(s2)
    flw f18,0x10(x30)
 260:	0100                	addi	s0,sp,128
 262:	04090103          	lb	sp,64(s2)
    flw f19,0x14(x30)
 266:	0100                	addi	s0,sp,128
    flw f20,0x18(x30)
 268:	04090403          	lb	s0,64(s2)
    li x19,0x40013000   # GPIO_BASE_ADDR
 26c:	0100                	addi	s0,sp,128
 26e:	04090103          	lb	sp,64(s2)
    fsw f4,0x0(x19)
 272:	0100                	addi	s0,sp,128
    fsw f5,0x4(x19)
 274:	04090303          	lb	t1,64(s2)
    fsw f6,0x8(x19)
 278:	0100                	addi	s0,sp,128
 27a:	04090103          	lb	sp,64(s2)
    fsw f7,0xc(x19)
 27e:	0100                	addi	s0,sp,128
    fsw f18,0x10(x19)
 280:	04090103          	lb	sp,64(s2)
    fsw f19,0x14(x19)
 284:	0100                	addi	s0,sp,128
 286:	04090403          	lb	s0,64(s2)
    fsw f20,0x18(x19)
 28a:	0100                	addi	s0,sp,128
  jal x0, default_exc_handler
 28c:	04090103          	lb	sp,64(s2)
  mv  x1, x0
 290:	0100                	addi	s0,sp,128
 292:	04090303          	lb	t1,64(s2)
  mv  x2, x1
 296:	0100                	addi	s0,sp,128
  mv  x3, x1
 298:	04090303          	lb	t1,64(s2)
  mv  x4, x1
 29c:	0100                	addi	s0,sp,128
 29e:	04090103          	lb	sp,64(s2)
  mv  x5, x1
 2a2:	0100                	addi	s0,sp,128
  mv  x6, x1
 2a4:	04090403          	lb	s0,64(s2)
  mv  x7, x1
 2a8:	0100                	addi	s0,sp,128
 2aa:	04090103          	lb	sp,64(s2)
  mv  x8, x1
 2ae:	0100                	addi	s0,sp,128
  mv  x9, x1
 2b0:	04090403          	lb	s0,64(s2)
  mv x10, x1
 2b4:	0100                	addi	s0,sp,128
 2b6:	08090103          	lb	sp,128(s2)
  mv x11, x1
 2ba:	0100                	addi	s0,sp,128
  mv x12, x1
 2bc:	04090103          	lb	sp,64(s2)
  mv x13, x1
 2c0:	0100                	addi	s0,sp,128
 2c2:	04090103          	lb	sp,64(s2)
  mv x14, x1
 2c6:	0100                	addi	s0,sp,128
  mv x15, x1
 2c8:	04090103          	lb	sp,64(s2)
  mv x16, x1
 2cc:	0100                	addi	s0,sp,128
 2ce:	04090103          	lb	sp,64(s2)
  mv x17, x1
 2d2:	0100                	addi	s0,sp,128
  mv x18, x1
 2d4:	04090103          	lb	sp,64(s2)
  mv x19, x1
 2d8:	0100                	addi	s0,sp,128
 2da:	04090103          	lb	sp,64(s2)
  mv x20, x1
 2de:	0100                	addi	s0,sp,128
  mv x21, x1
 2e0:	04090203          	lb	tp,64(s2)
  mv x22, x1
 2e4:	0100                	addi	s0,sp,128
 2e6:	04090103          	lb	sp,64(s2)
  mv x23, x1
 2ea:	0100                	addi	s0,sp,128
  mv x24, x1
 2ec:	04090103          	lb	sp,64(s2)
  mv x25, x1
 2f0:	0100                	addi	s0,sp,128
 2f2:	04090103          	lb	sp,64(s2)
  mv x26, x1
 2f6:	0100                	addi	s0,sp,128
  mv x27, x1
 2f8:	04090103          	lb	sp,64(s2)
  mv x28, x1
 2fc:	0100                	addi	s0,sp,128
 2fe:	04090103          	lb	sp,64(s2)
  mv x29, x1
 302:	0100                	addi	s0,sp,128
  mv x30, x1
 304:	04090103          	lb	sp,64(s2)
  mv x31, x1
 308:	0100                	addi	s0,sp,128
 30a:	04090103          	lb	sp,64(s2)
  la   x2, _stack_start
 30e:	0100                	addi	s0,sp,128
 310:	0409                	addi	s0,s0,2
 312:	0000                	unimp
  la x26, _bss_start
 314:	0101                	addi	sp,sp,0
 316:	0150                	addi	a2,sp,132
  la x27, _bss_end
 318:	0000                	unimp
 31a:	001d0003          	lb	zero,1(s10)
  bge x26, x27, zero_loop_end
 31e:	0000                	unimp
  sw x0, 0(x26)
 320:	0101                	addi	sp,sp,0
 322:	000d0efb          	0xd0efb
  addi x26, x26, 4
 326:	0101                	addi	sp,sp,0
  ble x26, x27, zero_loop
 328:	0101                	addi	sp,sp,0
 32a:	0000                	unimp
  addi x10, x0, 0
 32c:	0100                	addi	s0,sp,128
 32e:	0000                	unimp
  addi x11, x0, 0
 330:	0001                	nop
 332:	30747263          	bgeu	s0,t2,636 <__DTOR_END__+0x2ee>
  jal x1, main
 336:	532e                	lw	t1,232(sp)
 338:	0000                	unimp
 33a:	0000                	unimp
 33c:	0000                	unimp
 33e:	0205                	addi	tp,tp,1
 340:	028c                	addi	a1,sp,320
 342:	0000                	unimp
 344:	0315                	addi	t1,t1,5
 346:	0904                	addi	s1,sp,144
 348:	0004                	0x4
 34a:	0301                	addi	t1,t1,0
 34c:	0901                	addi	s2,s2,0
 34e:	0004                	0x4
 350:	0301                	addi	t1,t1,0
 352:	0901                	addi	s2,s2,0
 354:	0004                	0x4
 356:	0301                	addi	t1,t1,0
 358:	0901                	addi	s2,s2,0
 35a:	0004                	0x4
 35c:	0301                	addi	t1,t1,0
 35e:	0901                	addi	s2,s2,0
 360:	0004                	0x4
 362:	0301                	addi	t1,t1,0
 364:	0901                	addi	s2,s2,0
 366:	0004                	0x4
 368:	0301                	addi	t1,t1,0
 36a:	0901                	addi	s2,s2,0
 36c:	0004                	0x4
 36e:	0301                	addi	t1,t1,0
 370:	0901                	addi	s2,s2,0
 372:	0004                	0x4
 374:	0301                	addi	t1,t1,0
 376:	0901                	addi	s2,s2,0
 378:	0004                	0x4
 37a:	0301                	addi	t1,t1,0
 37c:	0901                	addi	s2,s2,0
 37e:	0004                	0x4
 380:	0301                	addi	t1,t1,0
 382:	0901                	addi	s2,s2,0
 384:	0004                	0x4
 386:	0301                	addi	t1,t1,0
 388:	0901                	addi	s2,s2,0
 38a:	0004                	0x4
 38c:	0301                	addi	t1,t1,0
 38e:	0901                	addi	s2,s2,0
 390:	0004                	0x4
 392:	0301                	addi	t1,t1,0
 394:	0901                	addi	s2,s2,0
 396:	0004                	0x4
 398:	0301                	addi	t1,t1,0
 39a:	0901                	addi	s2,s2,0
 39c:	0004                	0x4
 39e:	0301                	addi	t1,t1,0
 3a0:	0901                	addi	s2,s2,0
 3a2:	0004                	0x4
 3a4:	0301                	addi	t1,t1,0
 3a6:	0901                	addi	s2,s2,0
 3a8:	0004                	0x4
 3aa:	0301                	addi	t1,t1,0
 3ac:	0901                	addi	s2,s2,0
 3ae:	0004                	0x4
 3b0:	0301                	addi	t1,t1,0
 3b2:	0901                	addi	s2,s2,0
 3b4:	0004                	0x4
 3b6:	0301                	addi	t1,t1,0
 3b8:	0901                	addi	s2,s2,0
 3ba:	0004                	0x4
 3bc:	0301                	addi	t1,t1,0
 3be:	0901                	addi	s2,s2,0
 3c0:	0004                	0x4
 3c2:	0301                	addi	t1,t1,0
 3c4:	0901                	addi	s2,s2,0
 3c6:	0004                	0x4
 3c8:	0301                	addi	t1,t1,0
 3ca:	0901                	addi	s2,s2,0
 3cc:	0004                	0x4
 3ce:	0301                	addi	t1,t1,0
 3d0:	0901                	addi	s2,s2,0
 3d2:	0004                	0x4
 3d4:	0301                	addi	t1,t1,0
 3d6:	0901                	addi	s2,s2,0
 3d8:	0004                	0x4
 3da:	0301                	addi	t1,t1,0
 3dc:	0901                	addi	s2,s2,0
 3de:	0004                	0x4
 3e0:	0301                	addi	t1,t1,0
 3e2:	0901                	addi	s2,s2,0
 3e4:	0004                	0x4
 3e6:	0301                	addi	t1,t1,0
 3e8:	0901                	addi	s2,s2,0
 3ea:	0004                	0x4
 3ec:	0301                	addi	t1,t1,0
 3ee:	0901                	addi	s2,s2,0
 3f0:	0004                	0x4
 3f2:	0301                	addi	t1,t1,0
 3f4:	0901                	addi	s2,s2,0
 3f6:	0004                	0x4
 3f8:	0301                	addi	t1,t1,0
 3fa:	0901                	addi	s2,s2,0
 3fc:	0004                	0x4
 3fe:	0301                	addi	t1,t1,0
 400:	00040903          	lb	s2,0(s0)
 404:	0301                	addi	t1,t1,0
 406:	0906                	slli	s2,s2,0x1
 408:	0008                	0x8
 40a:	0301                	addi	t1,t1,0
 40c:	0901                	addi	s2,s2,0
 40e:	0004                	0x4
 410:	0301                	addi	t1,t1,0
 412:	0902                	c.slli64	s2
 414:	0004                	0x4
 416:	0301                	addi	t1,t1,0
 418:	00040903          	lb	s2,0(s0)
 41c:	0301                	addi	t1,t1,0
 41e:	0901                	addi	s2,s2,0
 420:	0004                	0x4
 422:	0301                	addi	t1,t1,0
 424:	0901                	addi	s2,s2,0
 426:	0004                	0x4
 428:	0301                	addi	t1,t1,0
 42a:	0906                	slli	s2,s2,0x1
 42c:	0004                	0x4
 42e:	0301                	addi	t1,t1,0
 430:	0901                	addi	s2,s2,0
 432:	0004                	0x4
 434:	0301                	addi	t1,t1,0
 436:	0901                	addi	s2,s2,0
 438:	0004                	0x4
 43a:	0901                	addi	s2,s2,0
 43c:	0004                	0x4
 43e:	0100                	addi	s0,sp,128
 440:	0001                	nop
 442:	0205                	addi	tp,tp,1
 444:	0000                	unimp
 446:	0000                	unimp
 448:	0100cb03          	lbu	s6,16(ra)
 44c:	7c090103          	lb	sp,1984(s2)
 450:	0100                	addi	s0,sp,128
 452:	04090403          	lb	s0,64(s2)
 456:	0100                	addi	s0,sp,128
 458:	04090403          	lb	s0,64(s2)
 45c:	0100                	addi	s0,sp,128
 45e:	04090403          	lb	s0,64(s2)
 462:	0100                	addi	s0,sp,128
 464:	0409                	addi	s0,s0,2
 466:	0000                	unimp
 468:	0101                	addi	sp,sp,0

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
   0:	0022                	c.slli	zero,0x8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0104                	addi	s1,sp,128
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	028c                	addi	a1,sp,320
  16:	0000                	unimp
  18:	0000                	unimp
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	0030                	addi	a2,sp,8
  22:	0000                	unimp
  24:	8001                	c.srli64	s0
  26:	001e                	c.slli	zero,0x7
  28:	0000                	unimp
  2a:	0002                	c.slli64	zero
  2c:	0014                	0x14
  2e:	0000                	unimp
  30:	0104                	addi	s1,sp,128
  32:	0316                	slli	t1,t1,0x5
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0000                	unimp
  3a:	003c                	addi	a5,sp,8
  3c:	0000                	unimp
  3e:	0006                	c.slli	zero,0x1
  40:	0000                	unimp
  42:	0030                	addi	a2,sp,8
  44:	0000                	unimp
  46:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	1000                	addi	s0,sp,32
   4:	1106                	slli	sp,sp,0x21
   6:	1201                	addi	tp,tp,-32
   8:	0301                	addi	t1,t1,0
   a:	1b0e                	slli	s6,s6,0x23
   c:	250e                	fld	fa0,192(sp)
   e:	130e                	slli	t1,t1,0x23
  10:	0005                	c.nop	1
  12:	0000                	unimp
  14:	1101                	addi	sp,sp,-32
  16:	1000                	addi	s0,sp,32
  18:	5506                	lw	a0,96(sp)
  1a:	0306                	slli	t1,t1,0x1
  1c:	1b0e                	slli	s6,s6,0x23
  1e:	250e                	fld	fa0,192(sp)
  20:	130e                	slli	t1,t1,0x23
  22:	0005                	c.nop	1
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	001c                	0x1c
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0200                	addi	s0,sp,256
	...
  1e:	0000                	unimp
  20:	0024                	addi	s1,sp,8
  22:	0000                	unimp
  24:	0002                	c.slli64	zero
  26:	0026                	c.slli	zero,0x9
  28:	0000                	unimp
  2a:	0004                	0x4
  2c:	0000                	unimp
  2e:	0000                	unimp
  30:	028c                	addi	a1,sp,320
  32:	0000                	unimp
  34:	00ac                	addi	a1,sp,72
  36:	0000                	unimp
  38:	0000                	unimp
  3a:	0000                	unimp
  3c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4d4e                	lw	s10,208(sp)
   2:	00732e53          	fadd.s	ft8,ft6,ft7,rdn
   6:	6d6f682f          	0x6d6f682f
   a:	2f65                	jal	7c2 <__DTOR_END__+0x47a>
   c:	6465                	lui	s0,0x19
   e:	2f61                	jal	7a6 <__DTOR_END__+0x45e>
  10:	6b726f77          	0x6b726f77
  14:	63617073          	csrci	0x636,2
  18:	2f65                	jal	7d0 <__DTOR_END__+0x488>
  1a:	4841                	li	a6,16
  1c:	4c42                	lw	s8,16(sp)
  1e:	535f 434f 495f      	0x495f434f535f
  24:	4542                	lw	a0,16(sp)
  26:	2f58                	fld	fa4,152(a4)
  28:	752f7773          	csrrci	a4,0x752,30
  2c:	7261                	lui	tp,0xffff8
  2e:	0074                	addi	a3,sp,12
  30:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
  34:	5341                	li	t1,-16
  36:	3220                	fld	fs0,96(a2)
  38:	332e                	fld	ft6,232(sp)
  3a:	0035                	c.nop	13
  3c:	30747263          	bgeu	s0,t2,340 <__CTOR_END__>
  40:	532e                	lw	t1,232(sp)
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffff                	0xffff
   2:	ffff                	0xffff
   4:	0000                	unimp
   6:	0000                	unimp
   8:	028c                	addi	a1,sp,320
   a:	0000                	unimp
   c:	0338                	addi	a4,sp,392
   e:	0000                	unimp
  10:	0000                	unimp
  12:	0000                	unimp
  14:	008c                	addi	a1,sp,64
	...
